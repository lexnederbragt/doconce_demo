WHAT   := text1 reference1 exercise1 slide1 include1 admonition1
# currently, choosing all do_files/*.do.txt, which is not optimal
DO_FILES   := $(shell ls do_files/*.do.txt)
DO_IN      := $(addsuffix .do.txt, ${WHAT})
EXTENSIONS := .html .pdf .ipynb .md
COMMANDS   := $(addsuffix .commands.sh, ${WHAT})
# common targets
TARGETS    := $(addsuffix .html, ${WHAT})
TARGETS    += $(addsuffix .pdf, ${WHAT})
TARGETS    += $(addsuffix .ipynb, ${WHAT})
TARGETS    += $(addsuffix .md, ${WHAT})
TARGETS    := $(addprefix ../pub/, ${TARGETS})

# targets specific for slides
TARGETS_SLIDE += $(addsuffix .deck.html, slide1)
TARGETS_SLIDE += $(addsuffix .reveal.html, slide1)
TARGETS_SLIDE := $(addprefix ../pub/, ${TARGETS_SLIDE})

# PDFs of slides (exclude from Github Actions)
SLIDE_PDF := $(addsuffix .deck.pdf, slide1)
SLIDE_PDF += $(addsuffix .reveal.pdf, slide1)
SLIDE_PDF := $(addprefix ../pub/, ${SLIDE_PDF})

.PHONY : all test pdf clean cleanall

all : ${DO_IN} ${TARGETS} ${COMMANDS} ${TARGETS_SLIDE}

test:
	@echo DO_FILES: ${DO_FILES}
	@echo DO_IN: ${DO_IN}
	@echo COMMANDS: ${COMMANDS}
	@echo TARGETS: ${TARGETS}
	@echo TARGETS_SLIDE: ${TARGETS_SLIDE}
	@echo SLIDE_PDF: ${SLIDE_PDF}

pdf: ${SLIDE_PDF}

# Building up the doconce file by adding successive doconce files
%.do.txt : ../scripts/%.prepare.sh ${DO_FILES}
	# Target: $@
	sh $< > $@

# commands used
# use the '--what-if' option to show
# what would happen if do files was updated
# use $(filter ../pub/$*%, ${TARGETS}) to select appropriate targets only
%.commands.sh : %.do.txt
	# Target: $@
	# WHAT: ${*}
	@echo "# This file is generated by make, do not edit" > $@
	@echo >> $@
	make -n --what-if $*.do.txt $(filter ../pub/$*%, ${TARGETS}) $(filter ../pub/$*%, ${TARGETS_SLIDE}) $(filter ../pub/$*%, ${SLIDE_PDF}) | ../scripts/format_commands.sh  >> $@

# html for admonitions
../pub/admonition%.html : admonition%.do.txt
	# Building html
	# Target: $@
	doconce format html $< --execute=abort \
	--html_style=plain --html_admon=colors && \
	mv admonition$*.html $@

# alternative:
# --html_style=bootswatch_readable --html_admon=bootstrap_alert && \

# all other html
# html
../pub/%.html : %.do.txt
	# Building html
	# Target: $@
	doconce format html $< --execute=abort && \
	mv $*.html $@

# Specific rule for pdf with references
../pub/reference%.pdf : reference%.do.txt
	# Building pdf
	doconce format pdflatex $< --latex_code_style=vrb --execute=abort && \
	pdflatex reference$* && \
	pdflatex reference$* && \
	makeindex reference$* && \
	bibtex reference$* && \
	pdflatex reference$* && \
	mv reference$*.pdf $@

# All other pdfs
../pub/%.pdf : %.do.txt
	# Building pdf
	# Target: $@
	doconce format pdflatex $< --latex_code_style=vrb --execute=abort && \
	pdflatex $*.tex && \
	mv $*.pdf $@

# jupyter notebook for exercises with and without answers and solutions
../pub/exercise%.ipynb : exercise%.do.txt
	# Building jupyter notebook for exercises with answers and solutions
	# Target: $@
	doconce format ipynb $< --execute=abort && \
	mv exercise$*.ipynb ../pub/exercise$*-solutions.ipynb
	# Building jupyter notebook for exercises without answers and solutions
	doconce format ipynb $< --execute=abort --without_solutions --without_answers && \
	mv exercise$*.ipynb $@


# jupyter notebook with references
../pub/reference%.ipynb : reference%.do.txt
	# Building jupyter notebook
	doconce format ipynb $< --execute=abort \
	--ipynb_cite=latex-plain && \
	mv reference$*.ipynb $@


# all other jupyter notebooks
../pub/%.ipynb : %.do.txt
	# Building jupyter notebook
	# Target: $@
	doconce format ipynb $< --execute=abort && \
	mv $*.ipynb $@

# markdown
../pub/%.md : %.do.txt
	# Building markdown
	# Target: $@
	doconce format markdown $< && \
	mv $*.md $@

# Start of slide specific commands
ifneq (,$(findstring slide,${WHAT}))

# reveal.js slides
../pub/slide%.reveal.html : slide%.do.txt
	# Building reveal.js slides
	# Target: $@
	doconce format html $< --html_output=slide$*.reveal --pygments_html_style=perldoc \
	    --keep_pygments_html_bg SLIDE_TYPE=reveal SLIDE_THEME=beige \
		--skip_inline_comments --execute=abort \
	&& doconce slides_html slide$*.reveal reveal --html_slide_theme=beige && \
	mv slide$*.reveal.html $@ && \
	rsync -a reveal.js ../pub/ && rm -r reveal.js


# reveal.js PDF
../pub/%.reveal.pdf : ../pub/%.reveal.html
	# Building PDF of reveal.js slides
	# Target: $@
	deck2pdf --profile=revealjs $< $@

# deck.js slides
../pub/slide%.deck.html : slide%.do.txt
	# Building deck.js slides
	# Target: $@
	doconce format html $< --html_output=slide$*.deck --pygments_html_style=autumn \
	--keep_pygments_html_bg SLIDE_TYPE=reveal SLIDE_THEME=swiss \
	--skip_inline_comments --execute=abort \
	&& doconce slides_html slide$*.deck deck --html_slide_theme=swiss && \
	mv slide$*.deck.html $@ && \
	rsync -a deck.js-latest ../pub/ && rm -r deck.js-latest

# deck.js PDF
../pub/%.deck.pdf : ../pub/%.deck.html
	# Building PDF of deck.js slides
	# Target: $@
	deck2pdf  --profile=deckjs $< $@
# End of slide specific commands
endif


# remove targets
clean :
	-rm ${TARGETS}
# Start of slide specific commands
ifneq (,$(findstring slide,${WHAT}))
	-rm ${TARGETS_SLIDE}
	-rm ${SLIDE_PDF}
# End of slide specific commands
endif

# remove targets, .commands.sh .do.txt files and files doconce can recreate
# use with care
cleanall :
	doconce clean
	-rm ${DO_IN} ${COMMANDS} ${TARGETS} ${TARGETS_SLIDE} ${SLIDE_PDF}
