WHAT   := text1 reference1 exercise1 slide1 include1 admonition1
# currently, choosing all qmd_files/*.qmd, which is not optimal
QMD_FILES   := $(shell ls qmd_files/*.qmd)
QMD_IN      := $(addsuffix .qmd, ${WHAT})
EXTENSIONS := .html .pdf .ipynb
COMMANDS   := $(addsuffix .commands.sh, ${WHAT})
# common targets
TARGETS    := $(addsuffix .html, ${WHAT})
TARGETS    += $(addsuffix .pdf, ${WHAT})
TARGETS    += $(addsuffix .ipynb, ${WHAT})

# exercses: add solutions
# exercise%-solutions.ipynb
TARGETS    += $(addsuffix -solutions.ipynb, $(filter exercise%, ${WHAT}))
# solutions%.ipynb
TEMP       := $(filter exercise%-solutions.ipynb, ${TARGETS})
TARGETS    += $(patsubst exercise%-solutions.ipynb, solutions%.ipynb, ${TEMP})

# add destination folder
TARGETS    := $(addprefix ../pub/, ${TARGETS})

# targets specific for slides
TARGETS_SLIDE += $(addsuffix .deck.html, slide1)
TARGETS_SLIDE += $(addsuffix .reveal.html, slide1)
TARGETS_SLIDE := $(addprefix ../pub/, ${TARGETS_SLIDE})

# PDFs of slides (exclude from Github Actions)
SLIDE_PDF := $(addsuffix .deck.pdf, slide1)
SLIDE_PDF += $(addsuffix .reveal.pdf, slide1)
SLIDE_PDF := $(addprefix ../pub/, ${SLIDE_PDF})

.PHONY : all test pdf clean cleanall

all : ${QMD_IN} ${TARGETS} ${COMMANDS} ${TARGETS_SLIDE}

test:
	@echo QMD_FILES: ${QMD_FILES}
	@echo QMD_IN: ${QMD_IN}
	@echo COMMANDS: ${COMMANDS}
	@echo TARGETS: ${TARGETS}
	@echo TARGETS_SLIDE: ${TARGETS_SLIDE}
	@echo SLIDE_PDF: ${SLIDE_PDF}

pdf: ${SLIDE_PDF}

# Building up the doconce file by adding successive doconce files
%.qmd : ../scripts/%.prepare.sh ${QMD_FILES}
	# Target: $@
	sh $< > $@

# commands used
# use the '--what-if' option to show
# what would happen if do files was updated
# use $(filter ../pub/$*%, ${TARGETS}) to select appropriate targets only
%.commands.sh : %.qmd
	# Target: $@
	# WHAT: ${*}
	@echo "# This file is generated by make, do not edit" > $@
	@echo >> $@
	make -n --what-if $*.qmd $(filter ../pub/$*%, ${TARGETS}) $(filter ../pub/$*%, ${TARGETS_SLIDE}) $(filter ../pub/$*%, ${SLIDE_PDF}) | ../scripts/format_commands.sh  >> $@

# html for admonitions
../pub/admonition%.html : admonition%.qmd
	# Building html
	# Target: $@
	doconce format html $< --execute=abort \
	--html_style=plain --html_admon=colors \
	--output=$@

# alternative:
# --html_style=bootswatch_readable --html_admon=bootstrap_alert && \

# all other html
# also create symlink to $*_files in pub folder
# for cirect rendering
../pub/%.html : %.qmd
	# Building html
	# Target: $@
	quarto render $< --to html && \
	mv $*.html $@ && \
	cd ../pub && ln -fs ../src/$*_files .

# All other pdfs
../pub/%.pdf : %.qmd
	# Building pdf
	# Target: $@
	quarto render $< --to pdf && \
	mv $*.pdf $@

# jupyter notebook for exercises without answers and solutions
../pub/exercise%.ipynb : exercise%.qmd
	# Building jupyter notebook for exercises without solutions
	# Target: $@
	quarto render $< --to ipynb && \
	mv exercise$*.ipynb $@

# jupyter notebook for exercises with answers and solutions
../pub/exercise%-solutions.ipynb : exercise%.qmd
	# Building jupyter notebook for exercises with solutions
	# Target: $@
	quarto render $< --to ipynb \
	--profile solutions -o exercise$*-solutions.ipynb && \
	mv exercise$*-solutions.ipynb $@

# jupyter notebook with answers and solutions only
../pub/solutions%.ipynb : exercise%.qmd
	# Building jupyter notebook with answers and solutions only
	# Target: $@
	-rm -r standalone_exercises
	doconce format ipynb $< --exercises_in_zip \
		--output=delete_me.ipynb && \
	rm delete_me.ipynb && \
	unzip exercise$*_exercises.zip && \
	doconce format ipynb standalone_exercises/solutions.qmd \
	--execute=abort --output=../$@

# all other jupyter notebooks
../pub/%.ipynb : %.qmd
	# Building jupyter notebook
	# Target: $@
	quarto render $< --to ipynb && \
	mv $*.ipynb $@

# markdown
../pub/%.md : %.qmd
	# Building markdown
	# Target: $@
	doconce format markdown $< \
	--output=$@

# Start of slide specific commands
ifneq (,$(findstring slide,${WHAT}))

# reveal.js slides
../pub/slide%.reveal.html : slide%.qmd
	# Building reveal.js slides
	# Target: $@
	doconce format html $< --output=slide$*.reveal --pygments_html_style=perldoc \
	    --keep_pygments_html_bg SLIDE_TYPE=reveal SLIDE_THEME=beige \
		--skip_inline_comments --execute=abort \
	&& doconce slides_html slide$*.reveal reveal --html_slide_theme=beige \
	--output=$@ && \
	rsync -a reveal.js ../pub/ && rm -r reveal.js && \
	rm slide$*.reveal.html # intermediate file

# reveal.js PDF
../pub/%.reveal.pdf : ../pub/%.reveal.html
	# Building PDF of reveal.js slides
	# Target: $@
	deck2pdf --profile=revealjs $< $@

# deck.js slides
../pub/slide%.deck.html : slide%.qmd
	# Building deck.js slides
	# Target: $@
	doconce format html $< --output=slide$*.deck --pygments_html_style=autumn \
	--keep_pygments_html_bg --html_figure_hrule=off \
	--skip_inline_comments --execute=abort \
	&& doconce slides_html slide$*.deck deck --html_slide_theme=swiss \
	--output=$@ && \
	rsync -a deck.js-latest ../pub/ && rm -r deck.js-latest && \
	rm slide$*.deck.html # intermediate file

# deck.js PDF
../pub/%.deck.pdf : ../pub/%.deck.html
	# Building PDF of deck.js slides
	# Target: $@
	deck2pdf  --profile=deckjs $< $@
# End of slide specific commands
endif

# remove targets
clean :
	-rm ${TARGETS}
	-rm .doconce_figure_cache/*
# Start of slide specific commands
ifneq (,$(findstring slide,${WHAT}))
	-rm ${TARGETS_SLIDE}
	-rm ${SLIDE_PDF}
# End of slide specific commands
endif

# remove targets, .commands.sh .qmd files and files doconce can recreate
# use with care
cleanall :
	doconce clean
	-rm ${QMD_IN} ${COMMANDS} ${TARGETS} ${TARGETS_SLIDE} ${SLIDE_PDF}
	-rm .doconce_figure_cache/*
